// Copyright 2021 The CPP Proto Builder Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated using https://google.github.io/cpp-proto-builder

#ifndef PROTO_BUILDER_TESTS_TEST_MESSAGE_RECURSIVE_BUILDER_H_
#define PROTO_BUILDER_TESTS_TEST_MESSAGE_RECURSIVE_BUILDER_H_

#include <string>

#include "proto_builder/tests/extra_test_message.pb.h"  // IWYU pragma: export
#include "proto_builder/tests/map_value_test_message.pb.h"  // IWYU pragma: export
#include "proto_builder/tests/test_message.pb.h"  // IWYU pragma: export
#include "absl/strings/string_view.h"

namespace proto_builder {

class TestMessageBuilder {
 public:
  TestMessageBuilder() = default;
  explicit TestMessageBuilder(const TestMessage& data) : data_(data) {}
  explicit TestMessageBuilder(TestMessage&& data) : data_(data) {}

  operator const TestMessage&() const {  // NOLINT
    return data_;
  }

  // https://google.github.io/cpp-proto-builder/templates#BEGIN

  TestMessageBuilder& SetOne(int32_t value);
  TestMessageBuilder& AddTwo(int32_t value);
  TestMessageBuilder& SetThree(const TestMessage::Sub& value);
  TestMessageBuilder& AddFour(const TestMessage::Sub& value);
  TestMessageBuilder& SetFive(const ExtraTestMessage& value);
  TestMessageBuilder& SetSix(int32_t value);
  TestMessageBuilder& SetSeven(const std::string& value);
  TestMessageBuilder& InsertEight(const ::google::protobuf::Map<int32_t, std::string>::value_type& key_value_pair);
  TestMessageBuilder& InsertNine(const ::google::protobuf::Map<std::string, ::proto_builder::TestMessage::Sub>::value_type& key_value_pair);
  TestMessageBuilder& InsertSixteen(const ::google::protobuf::Map<std::string, ::proto_builder::MapValueTestMessage>::value_type& key_value_pair);
  TestMessageBuilder& SetSeventeen(const TestMessage::Seventeen& value);
  TestMessageBuilder& SetF19NoRecurse(const TestMessage::Sub& value);
  TestMessageBuilder& AddF20NoRecurseRep(const TestMessage::Sub& value);
  TestMessageBuilder& SetNamespace(int32_t value);
  TestMessageBuilder& AddAnd(int32_t value);
  TestMessageBuilder& SetOr(const TestMessage& value);
  TestMessageBuilder& AddNot(const TestMessage& value);
  TestMessageBuilder& SetOperator(int32_t value);
  TestMessageBuilder& SetString21(const std::string& value);
  TestMessageBuilder& SetString22(const std::string& value);
  TestMessageBuilder& SetString23(const std::string& value);
  TestMessageBuilder& SetString24(absl::string_view value);
  TestMessageBuilder& SetBytes25(const std::string& value);
  TestMessageBuilder& SetBytes26(const std::string& value);
  TestMessageBuilder& SetBytes27(const std::string& value);
  TestMessageBuilder& SetBytes28(absl::string_view value);

  // https://google.github.io/cpp-proto-builder/templates#END

 private:
  TestMessage data_;
};

class TestMessage_SubBuilder {
 public:
  TestMessage_SubBuilder() = default;
  explicit TestMessage_SubBuilder(const TestMessage::Sub& data) : data_(data) {}
  explicit TestMessage_SubBuilder(TestMessage::Sub&& data) : data_(data) {}

  operator const TestMessage::Sub&() const {  // NOLINT
    return data_;
  }

  // https://google.github.io/cpp-proto-builder/templates#BEGIN

  TestMessage_SubBuilder& SetSubOne(const std::string& value);
  TestMessage_SubBuilder& AddSubTwo(const std::string& value);
  TestMessage_SubBuilder& SetSub3(const std::string& value);

  // https://google.github.io/cpp-proto-builder/templates#END

 private:
  TestMessage::Sub data_;
};

}  // namespace proto_builder

#endif  // PROTO_BUILDER_TESTS_TEST_MESSAGE_RECURSIVE_BUILDER_H_
