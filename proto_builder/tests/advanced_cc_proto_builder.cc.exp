// Copyright 2021 The CPP Proto Builder Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated using https://google.github.io/cpp-proto-builder

#include "proto_builder/tests/advanced_cc_proto_builder.h"

#include <utility>

namespace proto_builder::tests {

// https://google.github.io/cpp-proto-builder/templates#BEGIN

absl::StatusOr<Advanced> AdvancedBuilder::Build() const {
  if (ok()) {
    return data_;
  } else {
    return status_;
  }
}

absl::StatusOr<Advanced> AdvancedBuilder::Consume() {
  if (ok()) {
    return std::move(data_);
  } else {
    data_.Clear();
    absl::Status result(std::move(status_));
    status_ = absl::Status();
    get_raw_data_ = true;
    return result;
  }
}

absl::StatusOr<Advanced> AdvancedBuilder::MaybeGetRawData() const {
  if (get_raw_data_) {
    return data_;
  } else {
    return status_;
  }
}

AdvancedBuilder& AdvancedBuilder::UpdateStatus(absl::Status status) {
  status_ = std::move(status);
  if (status_.ok()) {
    get_raw_data_ = true;
  } else {
    get_raw_data_ = false;
    AddSourceLocationToStatus(source_location_, status_);
  }
  return *this;
}

AdvancedBuilder& AdvancedBuilder::SetText(const std::string& value) {
  data_.set_text(value);
  return *this;
}

// https://google.github.io/cpp-proto-builder/templates#END

}  // namespace proto_builder::tests
