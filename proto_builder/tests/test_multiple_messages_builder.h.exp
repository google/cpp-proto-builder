// Copyright 2021 The CPP Proto Builder Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated using https://google.github.io/cpp-proto-builder

#ifndef PROTO_BUILDER_TESTS_TEST_MULTIPLE_MESSAGES_BUILDER_H_
#define PROTO_BUILDER_TESTS_TEST_MULTIPLE_MESSAGES_BUILDER_H_

#include <string>

#include "proto_builder/tests/test_multiple_messages.pb.h"  // IWYU pragma: export

namespace proto_builder {

class TestMessageABuilder {
 public:
  TestMessageABuilder() = default;
  explicit TestMessageABuilder(const TestMessageA& data) : data_(data) {}
  explicit TestMessageABuilder(TestMessageA&& data) : data_(data) {}

  operator const TestMessageA&() const {  // NOLINT
    return data_;
  }

  // https://google.github.io/cpp-proto-builder/templates#BEGIN

  TestMessageABuilder& SetId(int32_t value);

  // https://google.github.io/cpp-proto-builder/templates#END

 private:
  TestMessageA data_;
};

class TestMessageBBuilder {
 public:
  TestMessageBBuilder() = default;
  explicit TestMessageBBuilder(const TestMessageB& data) : data_(data) {}
  explicit TestMessageBBuilder(TestMessageB&& data) : data_(data) {}

  operator const TestMessageB&() const {  // NOLINT
    return data_;
  }

  // https://google.github.io/cpp-proto-builder/templates#BEGIN

  TestMessageBBuilder& SetId(const std::string& value);

  // https://google.github.io/cpp-proto-builder/templates#END

 private:
  TestMessageB data_;
};

class TestMessageCBuilder {
 public:
  TestMessageCBuilder() = default;
  explicit TestMessageCBuilder(const TestMessageC& data) : data_(data) {}
  explicit TestMessageCBuilder(TestMessageC&& data) : data_(data) {}

  operator const TestMessageC&() const {  // NOLINT
    return data_;
  }

  // https://google.github.io/cpp-proto-builder/templates#BEGIN

  TestMessageCBuilder& SetA(const TestMessageA& value);
  TestMessageCBuilder& SetAId(int32_t value);
  TestMessageCBuilder& AddB(const TestMessageB& value);
  TestMessageCBuilder& SetD(const TestMessageC::TestMessageD& value);
  TestMessageCBuilder& SetDId(const std::string& value);

  // https://google.github.io/cpp-proto-builder/templates#END

 private:
  TestMessageC data_;
};

}  // namespace proto_builder

#endif  // PROTO_BUILDER_TESTS_TEST_MULTIPLE_MESSAGES_BUILDER_H_
