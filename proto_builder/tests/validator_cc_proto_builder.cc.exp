// Copyright 2021 The CPP Proto Builder Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated using https://google.github.io/cpp-proto-builder

#include "proto_builder/tests/validator_cc_proto_builder.h"

#include <utility>

namespace proto_builder::tests {

// https://google.github.io/cpp-proto-builder/templates#BEGIN

absl::StatusOr<Validator> ValidatorBuilder::Build() const {
  if (ok()) {
    return data_;
  } else {
    return status_;
  }
}

absl::StatusOr<Validator> ValidatorBuilder::Consume() {
  if (ok()) {
    return std::move(data_);
  } else {
    data_.Clear();
    absl::Status result(std::move(status_));
    status_ = absl::Status();
    get_raw_data_ = true;
    return result;
  }
}

absl::StatusOr<Validator> ValidatorBuilder::MaybeGetRawData() const {
  if (get_raw_data_) {
    return data_;
  } else {
    return status_;
  }
}

ValidatorBuilder& ValidatorBuilder::UpdateStatus(absl::Status status) {
  status_ = std::move(status);
  if (status_.ok()) {
    get_raw_data_ = true;
    ValidateData();
  } else {
    get_raw_data_ = false;
    AddSourceLocationToStatus(source_location_, status_);
  }
  return *this;
}

void ValidatorBuilder::ValidateData() const {
  if (status_.ok()) {
    status_ = protobuf::contrib::validator::Validate(data_);
    if (!status_.ok()) {
      AddSourceLocationToStatus(source_location_, status_);
    }
  }
}

ValidatorBuilder& ValidatorBuilder::SetAddress(const std::string& value) {
  data_.set_address(value);
  return *this;
}

ValidatorBuilder& ValidatorBuilder::AddFallback(
    const Validator::Fallback& value) {
  *data_.add_fallback() = value;
  return *this;
}

ValidatorBuilder& ValidatorBuilder::AddNotValidated(
    const Validator::NotValidated& value) {
  *data_.add_not_validated() = value;
  return *this;
}

ValidatorBuilder& ValidatorBuilder::InsertNamedFallback(
    const ::google::protobuf::Map<std::string, ::proto_builder::tests::
                                         Validator::Fallback>::value_type&
        key_value_pair) {
  data_.mutable_named_fallback()->insert(key_value_pair);
  return *this;
}

ValidatorBuilder& ValidatorBuilder::SetOptions(
    const Validator::Fallback& value) {
  *data_.mutable_options() = value;
  return *this;
}

ValidatorBuilder& ValidatorBuilder::SetOptions(const std::string& value) {
  *data_.mutable_options() = [=] {
    Validator::Fallback result;
    result.set_address(value);
    return result;
  }();
 return *this;
}

ValidatorBuilder& ValidatorBuilder::InsertOther(
    const ::google::protobuf::Map<int64_t, std::string>::value_type& key_value_pair) {
  data_.mutable_other()->insert(key_value_pair);
  return *this;
}

absl::StatusOr<Validator::Fallback> Validator_FallbackBuilder::Build() const {
  if (ok()) {
    return data_;
  } else {
    return status_;
  }
}

absl::StatusOr<Validator::Fallback> Validator_FallbackBuilder::Consume() {
  if (ok()) {
    return std::move(data_);
  } else {
    data_.Clear();
    absl::Status result(std::move(status_));
    status_ = absl::Status();
    get_raw_data_ = true;
    return result;
  }
}

absl::StatusOr<Validator::Fallback> Validator_FallbackBuilder::MaybeGetRawData()
    const {
  if (get_raw_data_) {
    return data_;
  } else {
    return status_;
  }
}

Validator_FallbackBuilder& Validator_FallbackBuilder::UpdateStatus(
    absl::Status status) {
  status_ = std::move(status);
  if (status_.ok()) {
    get_raw_data_ = true;
    ValidateData();
  } else {
    get_raw_data_ = false;
    AddSourceLocationToStatus(source_location_, status_);
  }
  return *this;
}

void Validator_FallbackBuilder::ValidateData() const {
  if (status_.ok()) {
    status_ = protobuf::contrib::validator::Validate(data_);
    if (!status_.ok()) {
      AddSourceLocationToStatus(source_location_, status_);
    }
  }
}

Validator_FallbackBuilder& Validator_FallbackBuilder::SetAddress(
    const std::string& value) {
  data_.set_address(value);
  return *this;
}

Validator_NotValidatedBuilder& Validator_NotValidatedBuilder::SetAddress(
    const std::string& value) {
  data_.set_address(value);
  return *this;
}

// https://google.github.io/cpp-proto-builder/templates#END

}  // namespace proto_builder::tests
