// Copyright 2021 The CPP Proto Builder Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated using https://google.github.io/cpp-proto-builder

#include "proto_builder/tests/test_conversions_builder.h"

#include "proto_builder/oss/proto_conversion_helpers.h"

namespace proto_builder {

// https://google.github.io/cpp-proto-builder/templates#BEGIN

ConversionsBuilder& ConversionsBuilder::AddLine(const std::string& value) {
  data_.add_line(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetTime(const Conversions::Duration& value) {
  *data_.mutable_time() = value;
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetTimeInt64Seconds(absl::Duration value) {
  data_.mutable_time()->set_int64_seconds(absl::ToInt64Seconds(value));
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetTimeInt64Milliseconds(absl::Duration value) {
  data_.mutable_time()->set_int64_milliseconds(absl::ToInt64Milliseconds(value));
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetTimeDoubleSeconds(absl::Duration value) {
  data_.mutable_time()->set_double_seconds(absl::ToDoubleSeconds(value));
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetTimeDoubleMilliseconds(absl::Duration value) {
  data_.mutable_time()->set_double_milliseconds(absl::ToDoubleMilliseconds(value));
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetProtoTime(
    const Conversions::ProtoTime& value) {
  *data_.mutable_proto_time() = value;
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetProtoTimeDuration(
    const absl::Duration& value) {
  *data_.mutable_proto_time()->mutable_duration() =
      *proto_builder::oss::ConvertToProto(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetProtoTimeTime(
    const absl::Time& value) {
  *data_.mutable_proto_time()->mutable_time() =
      *proto_builder::oss::ConvertToProto(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetOptionalSub(const Conversions::Sub& value) {
  *data_.mutable_optional_sub() = value;
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetOptionalSub(const char* value) {
  *data_.mutable_optional_sub() = ::proto_builder::oss::ParseTextOrDie<Conversions::Sub>(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetOptionalSubOne(int64_t value) {
  data_.mutable_optional_sub()->set_one(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::SetOptionalSubTwo(int64_t value) {
  data_.mutable_optional_sub()->set_two(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::AddRepeatedSub1(const Conversions::Sub& value) {
  *data_.add_repeated_sub1() = value;
  return *this;
}

ConversionsBuilder& ConversionsBuilder::AddRepeatedSub1(const char* value) {
  *data_.add_repeated_sub1() = ::proto_builder::oss::ParseTextOrDie<Conversions::Sub>(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::AddRepeatedSub2(const Conversions::Sub& value) {
  *data_.add_repeated_sub2() = value;
  return *this;
}

ConversionsBuilder& ConversionsBuilder::AddRepeatedSub2(const char* value) {
  *data_.add_repeated_sub2() = ::proto_builder::oss::ParseTextOrDie<Conversions::Sub>(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::AddRepeatedSub2(absl::string_view value) {
  *data_.add_repeated_sub2() = ::proto_builder::oss::ParseTextOrDie<Conversions::Sub>(value);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::AddRepeatedSub3(const Conversions_SubBuilder& value) {
  *data_.add_repeated_sub3() = value;
  return *this;
}

ConversionsBuilder& ConversionsBuilder::InsertMymap(const ::google::protobuf::Map<int32_t, std::string>::value_type& key_value_pair) {
  data_.mutable_mymap()->insert(key_value_pair);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::InsertOtherMap(const ::google::protobuf::Map<int32_t, std::string>::value_type& key_value_pair) {
  data_.mutable_other_map()->insert(key_value_pair);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::InsertSubMap(const ::google::protobuf::Map<int32_t, ::proto_builder::Conversions::Sub>::value_type& key_value_pair) {
  data_.mutable_sub_map()->insert(key_value_pair);
  return *this;
}

ConversionsBuilder& ConversionsBuilder::InsertSubMap(const std::pair<::google::protobuf::Map<int32_t, ::proto_builder::Conversions::Sub>::value_type::first_type, absl::string_view>& key_value_pair) {
  data_.mutable_sub_map()->insert(::google::protobuf::Map<int32_t, ::proto_builder::Conversions::Sub>::value_type(key_value_pair.first, ::proto_builder::oss::ParseTextOrDie<::google::protobuf::Map<int32_t, ::proto_builder::Conversions::Sub>::value_type::second_type>(key_value_pair.second)));
  return *this;
}

// https://google.github.io/cpp-proto-builder/templates#END

}  // namespace proto_builder
